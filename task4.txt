<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>To-Do App</title>
  <style>
    :root {
      --bg-light: #ffffff;
      --bg-dark: #1e1e1e;
      --text-light: #333;
      --text-dark: #f0f0f0;
      --primary: #6a5acd; /* Lavender color */
      --primary-dark: #4b3b8e; /* Darker lavender */
      --accent: #28a745;
      --accent-dark: #218838;
      --delete: #dc3545;
      --gray: #6c757d;
      --warning: #ffc107;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #f3e9fc 0%, #b9a6e8 100%); /* Lavender gradient */
      margin: 0;
      padding: 40px 20px;
      display: flex;
      justify-content: center;
      align-items: flex-start;
      min-height: 100vh;
      transition: background 0.3s;
    }
    body.dark {
      background: #121212;
    }
    .container {
      width: 100%;
      max-width: 600px;
      background: var(--bg-light);
      color: var(--text-light);
      padding: 30px;
      border-radius: 16px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
      animation: fadeIn 0.5s ease-in-out;
    }
    body.dark .container {
      background: var(--bg-dark);
      color: var(--text-dark);
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    .task-inputs {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 20px;
    }
    input[type="text"], input[type="datetime-local"] {
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 1rem;
    }
    button {
      padding: 12px;
      border: none;
      background: var(--primary); /* Lavender button */
      color: white;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
      transition: background 0.3s ease;
    }
    button:hover {
      background: var(--primary-dark); /* Dark lavender on hover */
    }
    .task {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 12px;
      border-bottom: 1px solid #eee;
      animation: fadeIn 0.3s ease;
    }
    .task.completed span {
      text-decoration: line-through;
      color: gray;
    }
    .task span {
      flex: 1;
      margin: 0 10px;
    }
    .task.overdue span {
      color: var(--warning);
    }
    .task-actions button {
      margin-left: 5px;
      background: var(--gray);
      border-radius: 6px;
      font-size: 0.9rem;
    }
    .task-actions button.delete {
      background: var(--delete);
    }
    .search-bar input {
      width: 100%;
      padding: 12px;
      border-radius: 8px;
      border: 1px solid #ccc;
      margin-bottom: 15px;
      font-size: 1rem;
    }
    .sort-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
    }
    .sort-controls button {
      flex: 1;
      background: var(--accent);
    }
    .sort-controls button:hover {
      background: var(--accent-dark);
    }
    .theme-toggle {
      text-align: right;
      margin-bottom: 15px;
    }
    .theme-toggle button {
      background: #444;
      color: #fff;
    }
    .filter-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
    }
    .filter-controls button {
      flex: 1;
      background: var(--accent);
    }
    .filter-controls button.active {
      background: var(--accent-dark);
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="theme-toggle">
      <button onclick="toggleTheme()">üåì Toggle Theme</button>
    </div>
    <h1>üìù To-Do App</h1>
    <div class="task-inputs">
      <input type="text" id="taskInput" placeholder="Enter task" />
      <input type="datetime-local" id="taskDateTime" />
      <button onclick="addTask()">Add Task</button>
    </div>
    <div class="search-bar">
      <input type="text" id="searchInput" placeholder="Search tasks..." oninput="renderTasks()" />
    </div>
    <div class="sort-controls">
      <button onclick="sortTasksByDate()">Sort by Date</button>
    </div>
    <div class="filter-controls">
      <button onclick="setFilter('all')" id="filter-all" class="active">All</button>
      <button onclick="setFilter('completed')" id="filter-completed">Completed</button>
      <button onclick="setFilter('pending')" id="filter-pending">Pending</button>
    </div>
    <div id="taskList"></div>
  </div>

  <script>
    let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
    let currentFilter = "all";

    function saveTasks() {
      localStorage.setItem("tasks", JSON.stringify(tasks));
    }

    function addTask() {
      const text = document.getElementById("taskInput").value.trim();
      const dateTime = document.getElementById("taskDateTime").value;
      if (text && dateTime) {
        const task = {
          id: Date.now(),
          text,
          dateTime,
          completed: false,
        };
        tasks.push(task);
        document.getElementById("taskInput").value = "";
        document.getElementById("taskDateTime").value = "";
        saveTasks();
        renderTasks();
      }
    }

    function renderTasks() {
      const searchTerm = document.getElementById("searchInput").value.toLowerCase();
      const list = document.getElementById("taskList");
      list.innerHTML = "";
      tasks
        .filter((task) => task.text.toLowerCase().includes(searchTerm))
        .filter((task) => {
          const matchesFilter =
            currentFilter === "all" ||
            (currentFilter === "completed" && task.completed) ||
            (currentFilter === "pending" && !task.completed);
          return matchesFilter;
        })
        .forEach((task) => {
          const div = document.createElement("div");
          const isOverdue = new Date(task.dateTime) < new Date() && !task.completed;
          div.className = `task${task.completed ? " completed" : ""}${isOverdue ? " overdue" : ""}`;
          
          const checkbox = document.createElement("input");
          checkbox.type = "checkbox";
          checkbox.checked = task.completed;
          checkbox.onchange = () => toggleComplete(task.id);
          
          const span = document.createElement("span");
          span.textContent = `${task.text} (${new Date(task.dateTime).toLocaleString()})`;
          
          const actions = document.createElement("div");
          actions.className = "task-actions";
          
          const editBtn = document.createElement("button");
          editBtn.textContent = "Edit";
          editBtn.onclick = () => editTask(task.id);
          
          const deleteBtn = document.createElement("button");
          deleteBtn.textContent = "Delete";
          deleteBtn.className = "delete";
          deleteBtn.onclick = () => deleteTask(task.id);
          
          actions.appendChild(editBtn);
          actions.appendChild(deleteBtn);
          
          div.appendChild(checkbox);
          div.appendChild(span);
          div.appendChild(actions);
          list.appendChild(div);
        });
    }

    function toggleComplete(id) {
      tasks = tasks.map((task) =>
        task.id === id ? { ...task, completed: !task.completed } : task
      );
      saveTasks();
      renderTasks();
    }

    function deleteTask(id) {
      tasks = tasks.filter((task) => task.id !== id);
      saveTasks();
      renderTasks();
    }

    function editTask(id) {
      const task = tasks.find((t) => t.id === id);
      if (task) {
        const newText = prompt("Edit task:", task.text);
        const newDateTime = prompt("Edit date and time (YYYY-MM-DDTHH:MM):", task.dateTime);
        if (newText !== null && newDateTime !== null) {
          task.text = newText.trim() || task.text;
          task.dateTime = newDateTime || task.dateTime;
          saveTasks();
          renderTasks();
        }
      }
    }

    function sortTasksByDate() {
      tasks.sort((a, b) => new Date(a.dateTime) - new Date(b.dateTime));
      renderTasks();
    }

    function setFilter(filter) {
      currentFilter = filter;
      document.querySelectorAll(".filter-controls button").forEach(btn =>
        btn.classList.remove("active")
      );
      document.getElementById(`filter-${filter}`).classList.add("active");
      renderTasks();
    }

    function toggleTheme() {
      document.body.classList.toggle("dark");
    }

    renderTasks();
  </script>
</body>
</html>
